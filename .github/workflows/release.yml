on:
  push:
    # Déclenche le workflow lorsque des modifications sont poussées sur les branches 'main' ou 'beta'
    branches:
      - main
      - dev
      - 53-24-mise-en-place-de-la-ci

permissions:
  # Accord de permission pour écrire des contenus dans le dépôt
  contents: write
  

jobs:
  get-version:
    # Utilise un workflow externe pour obtenir la version actuelle basée sur les branches de release et prerelease
    uses: shiipou/github-actions/.github/workflows/get-version.yml@main
    with:
      # Définir la branche 'main' pour les releases officielles
      release-branches: '^(main)$'
      # Définir la branche 'beta' pour les pre-releases
      prerelease-branches: '^(dev|53-24-mise-en-place-de-la-ci)$'

  test:
    name: Spring test
    runs-on: ubuntu-latest
    continue-on-error: true
    services:
      # Label used to access the service container
      db:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_DB: app
          POSTGRES_USER: user
          POSTGRES_PASSWORD: securePassword
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: setup java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build with Gradle
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/app
          SPRING_DATASOURCE_USERNAME: user
          SPRING_DATASOURCE_PASSWORD: securePassword
        run: chmod +x gradlew && ./gradlew test

  # Job pour construire le back-end Java
  build-backend:
    name: Build Java Backend
    runs-on: ubuntu-latest
    if: ${{ needs.get-version.outputs.will-release == 'true' }}
    needs:
      - get-version
    steps:
      # Étape 1 : Récupérer le code source
      - name: Checkout code
        uses: actions/checkout@v2

      # Étape 2 pour donner les permissions d'exécution à gradlew
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
      
      # Étape 3 : Configurer JDK 17
      - name: Setup Java JDK
        uses: actions/setup-java@v4.4.0
        with:
          java-version: '17'
          distribution: 'temurin'


      # Étape 4 : Construire le projet Java avec Gradle
      - name: Build backend with Gradle
        run: ./gradlew build

      # Étape 5 : Sauvegarder les artefacts du back-end (le fichier JAR)
      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend
          path: build/libs/*.jar

  # Job pour construire le front-end React
  build-frontend:
    name: Build React Frontend
    runs-on: ubuntu-latest
    if: ${{ needs.get-version.outputs.will-release == 'true' }}
    needs:
      - get-version
    steps:
      # Étape 1 : Récupérer le code source
      - name: Checkout code
        uses: actions/checkout@v2


      # Étape 2 : Configurer Node.js
      - name: Setup Node.js environment
        uses: actions/setup-node@v4.0.4

      # Étape 3 : Changer de répertoire vers le bon dossier du projet React
      - name: Change directory to frontend
        working-directory: ./front
        run: |
          npm install
          npm run build

      # Étape 4 : Sauvegarder les artefacts du front-end (fichiers de build)
      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend
          path: ./front/build/

      # Job pour publier la release sur GitHub
  release:
      name: Create GitHub Release
      runs-on: ubuntu-latest
      needs: [build-backend, build-frontend, get-version]
      steps:
      # Étape 1 : Télécharger les artefacts du back-end
      - name: Download backend artifact
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      # Étape 2 : Créer une archive ZIP des artefacts pour les inclure dans la release
      - name: Zip files artifacts
        run: zip -r frontend.zip artifacts/frontend/*

      # Étape 3 : Créer la release sur GitHub
      - name: Create GitHub Release
        env:
          VERSION: "${{ needs.get-version.outputs.version }}"
          REPO: "${{ github.repository }}"
          COMMIT: "${{ github.sha }}"
          GH_TOKEN: "${{ github.token }}"
          PRERELEASE: ${{ needs.get-version.outputs.is-prerelease }}
          CHANGELOG: ${{ needs.get-version.outputs.changelogs }}
        run: |
            echo "$CHANGELOG" > changelog.md
            if [ "$PRERELEASE" == "true" ]; then
              gh release create --prerelease --repo $REPO --target $COMMIT -F changelog.md "v$VERSION" artifacts/backend/* frontend.zip
            else
              gh release create --repo $REPO --target $COMMIT -F changelog.md "v$VERSION" artifacts/backend/* frontend.zip
            fi
